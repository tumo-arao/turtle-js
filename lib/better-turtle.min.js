!(function (t, e) {
  'object' == typeof exports && 'object' == typeof module
    ? (module.exports = e())
    : 'function' == typeof define && define.amd
    ? define('BetterTurtle', [], e)
    : 'object' == typeof exports
    ? (exports.BetterTurtle = e())
    : (t.BetterTurtle = e());
})(self, function () {
  return (() => {
    'use strict';
    var t = {
        912: (t, e, i) => {
          Object.defineProperty(e, '__esModule', { value: !0 }),
            (e.convertToColor = e.isHTMLColorName = e.Color = void 0);
          const s = i(444);
          class r {
            constructor(t) {
              (this.r = 0),
                (this.g = 0),
                (this.b = 0),
                (this.a = 1),
                (this.rgb = t);
            }
            get rgb() {
              return [this.r, this.g, this.b];
            }
            set rgb([t, e, i]) {
              (this.r = t), (this.g = e), (this.b = i);
            }
            toHex(t) {
              let e = t ? '' : '#';
              return (
                (e += this.r.toString(16).padStart(2, '0')),
                (e += this.g.toString(16).padStart(2, '0')),
                (e += this.b.toString(16).padStart(2, '0')),
                e
              );
            }
            toRGB() {
              return `rgb(${this.r}, ${this.g}, ${this.b})`;
            }
            toRGBA() {
              return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;
            }
          }
          (e.Color = r),
            (e.isHTMLColorName = function (t) {
              return null != (0, s.hex)(t);
            }),
            (e.convertToColor = function (t) {
              var e, i, n, o, h, a;
              if (t instanceof r) return t;
              let l = [0, 0, 0];
              return (
                Array.isArray(t)
                  ? ((null !== (e = l[0]) && void 0 !== e) || (l[0] = t[0]),
                    (null !== (i = l[1]) && void 0 !== i) || (l[1] = t[1]),
                    (null !== (n = l[2]) && void 0 !== n) || (l[2] = t[2]))
                  : (t.replace(/ /g, ''),
                    t.toLowerCase(),
                    (0, s.hex)(t) && (t = (0, s.hex)(t)),
                    '#' == t[0] && (t = t.slice(1, 7)),
                    t.length >= 6
                      ? ((l[0] = parseInt(t.slice(0, 2), 16)),
                        (l[1] = parseInt(t.slice(2, 4), 16)),
                        (l[2] = parseInt(t.slice(4, 6), 16)))
                      : ((l[0] = parseInt(
                          null !== (o = t[0]) && void 0 !== o ? o : '0',
                          16
                        )),
                        (l[1] = parseInt(
                          null !== (h = t[1]) && void 0 !== h ? h : '0',
                          16
                        )),
                        (l[2] = parseInt(
                          null !== (a = t[2]) && void 0 !== a ? a : '0',
                          16
                        )))),
                (l[0] = l[0] < 0 ? 0 : l[0] > 255 ? 255 : l[0]),
                (l[1] = l[1] < 0 ? 0 : l[1] > 255 ? 255 : l[1]),
                (l[1] = l[1] < 0 ? 0 : l[1] > 255 ? 255 : l[1]),
                new r(l)
              );
            });
        },
        444: (t, e) => {
          Object.defineProperty(e, '__esModule', { value: !0 }),
            (e.random = e.all = e.hex = e.names = void 0);
          const i = {
            black: '#000000',
            silver: '#C0C0C0',
            gray: '#808080',
            grey: '#808080',
            white: '#FFFFFF',
            maroon: '#800000',
            red: '#FF0000',
            purple: '#800080',
            fuchsia: '#FF00FF',
            green: '#008000',
            lime: '#00FF00',
            olive: '#808000',
            yellow: '#FFFF00',
            navy: '#000080',
            blue: '#0000FF',
            teal: '#008080',
            aqua: '#00FFFF',
            darkblue: '#00008B',
            mediumblue: '#0000CD',
            darkgreen: '#006400',
            darkcyan: '#008B8B',
            deepskyblue: '#00BFFF',
            darkturquoise: '#00CED1',
            mediumspringgreen: '#00FA9A',
            springgreen: '#00FF7F',
            cyan: '#00FFFF',
            midnightblue: '#191970',
            dodgerblue: '#1E90FF',
            lightseagreen: '#20B2AA',
            forestgreen: '#228B22',
            seagreen: '#2E8B57',
            darkslategray: '#2F4F4F',
            darkslategrey: '#2F4F4F',
            limegreen: '#32CD32',
            mediumseagreen: '#3CB371',
            turquoise: '#40E0D0',
            royalblue: '#4169E1',
            steelblue: '#4682B4',
            darkslateblue: '#483D8B',
            mediumturquoise: '#48D1CC',
            indigo: '#4B0082',
            darkolivegreen: '#556B2F',
            cadetblue: '#5F9EA0',
            cornflowerblue: '#6495ED',
            rebeccapurple: '#663399',
            mediumaquamarine: '#66CDAA',
            dimgray: '#696969',
            dimgrey: '#696969',
            slateblue: '#6A5ACD',
            olivedrab: '#6B8E23',
            slategray: '#708090',
            slategrey: '#708090',
            lightslategray: '#778899',
            lightslategrey: '#778899',
            mediumslateblue: '#7B68EE',
            lawngreen: '#7CFC00',
            chartreuse: '#7FFF00',
            aquamarine: '#7FFFD4',
            skyblue: '#87CEEB',
            lightskyblue: '#87CEFA',
            blueviolet: '#8A2BE2',
            darkred: '#8B0000',
            darkmagenta: '#8B008B',
            saddlebrown: '#8B4513',
            darkseagreen: '#8FBC8F',
            lightgreen: '#90EE90',
            mediumpurple: '#9370DB',
            darkviolet: '#9400D3',
            palegreen: '#98FB98',
            darkorchid: '#9932CC',
            yellowgreen: '#9ACD32',
            sienna: '#A0522D',
            brown: '#A52A2A',
            darkgray: '#A9A9A9',
            darkgrey: '#A9A9A9',
            lightblue: '#ADD8E6',
            greenyellow: '#ADFF2F',
            paleturquoise: '#AFEEEE',
            lightsteelblue: '#B0C4DE',
            powderblue: '#B0E0E6',
            firebrick: '#B22222',
            darkgoldenrod: '#B8860B',
            mediumorchid: '#BA55D3',
            rosybrown: '#BC8F8F',
            darkkhaki: '#BDB76B',
            mediumvioletred: '#C71585',
            indianred: '#CD5C5C',
            peru: '#CD853F',
            chocolate: '#D2691E',
            tan: '#D2B48C',
            lightgray: '#D3D3D3',
            lightgrey: '#D3D3D3',
            thistle: '#D8BFD8',
            orchid: '#DA70D6',
            goldenrod: '#DAA520',
            palevioletred: '#DB7093',
            crimson: '#DC143C',
            gainsboro: '#DCDCDC',
            plum: '#DDA0DD',
            burlywood: '#DEB887',
            lightcyan: '#E0FFFF',
            lavender: '#E6E6FA',
            darksalmon: '#E9967A',
            violet: '#EE82EE',
            palegoldenrod: '#EEE8AA',
            lightcoral: '#F08080',
            khaki: '#F0E68C',
            aliceblue: '#F0F8FF',
            honeydew: '#F0FFF0',
            azure: '#F0FFFF',
            sandybrown: '#F4A460',
            wheat: '#F5DEB3',
            beige: '#F5F5DC',
            whitesmoke: '#F5F5F5',
            mintcream: '#F5FFFA',
            ghostwhite: '#F8F8FF',
            salmon: '#FA8072',
            antiquewhite: '#FAEBD7',
            linen: '#FAF0E6',
            lightgoldenrodyellow: '#FAFAD2',
            oldlace: '#FDF5E6',
            magenta: '#FF00FF',
            deeppink: '#FF1493',
            orangered: '#FF4500',
            tomato: '#FF6347',
            hotpink: '#FF69B4',
            coral: '#FF7F50',
            darkorange: '#FF8C00',
            lightsalmon: '#FFA07A',
            orange: '#FFA500',
            lightpink: '#FFB6C1',
            pink: '#FFC0CB',
            gold: '#FFD700',
            peachpuff: '#FFDAB9',
            navajowhite: '#FFDEAD',
            moccasin: '#FFE4B5',
            bisque: '#FFE4C4',
            mistyrose: '#FFE4E1',
            blanchedalmond: '#FFEBCD',
            papayawhip: '#FFEFD5',
            lavenderblush: '#FFF0F5',
            seashell: '#FFF5EE',
            cornsilk: '#FFF8DC',
            lemonchiffon: '#FFFACD',
            floralwhite: '#FFFAF0',
            snow: '#FFFAFA',
            lightyellow: '#FFFFE0',
            ivory: '#FFFFF0',
          };
          function s(t) {
            return i[t];
          }
          (e.names = function () {
            return Object.keys(i);
          }),
            (e.hex = s),
            (e.all = function () {
              return i;
            }),
            (e.random = function () {
              var t;
              const e = Object.keys(i);
              return null !==
                (t = s(e[Math.floor(Math.random() * e.length)])) && void 0 !== t
                ? t
                : '#FFFFFF';
            });
        },
        590: function (t, e, i) {
          var s =
              (this && this.__createBinding) ||
              (Object.create
                ? function (t, e, i, s) {
                    void 0 === s && (s = i),
                      Object.defineProperty(t, s, {
                        enumerable: !0,
                        get: function () {
                          return e[i];
                        },
                      });
                  }
                : function (t, e, i, s) {
                    void 0 === s && (s = i), (t[s] = e[i]);
                  }),
            r =
              (this && this.__exportStar) ||
              function (t, e) {
                for (var i in t)
                  'default' === i ||
                    Object.prototype.hasOwnProperty.call(e, i) ||
                    s(e, t, i);
              };
          Object.defineProperty(e, '__esModule', { value: !0 }),
            (e.Colors = void 0),
            r(i(292), e),
            (e.Colors = i(912));
        },
        742: (t, e) => {
          function i(t) {
            return t * (Math.PI / 180);
          }
          function s(t, e) {
            const s = { x: 0, y: 0 },
              r = Math.sqrt(Math.pow(t.x, 2) + Math.pow(t.y, 2)),
              n = Math.atan2(t.x, t.y);
            return (
              (s.x = Math.sin(i(e) + n) * r), (s.y = Math.cos(i(e) + n) * r), s
            );
          }
          Object.defineProperty(e, '__esModule', { value: !0 }),
            (e.resizeShape =
              e.rotateShape =
              e.degToRad =
              e.BuiltInShapes =
                void 0),
            (e.BuiltInShapes = {
              Default: [
                { x: 0, y: 0 },
                { x: 3, y: -3 },
                { x: 0, y: 6 },
                { x: -3, y: -3 },
              ],
              Triangle: [
                { x: 3, y: 0 },
                { x: 0, y: 6 },
                { x: -3, y: 0 },
              ],
            }),
            (e.degToRad = i),
            (e.rotateShape = function (t, e) {
              const i = [];
              for (let r = 0; r < t.length; r++) {
                const n = t[r];
                n && (i[r] = s(n, e));
              }
              return i;
            }),
            (e.resizeShape = function (t, e) {
              const i = [];
              for (let s = 0; s < t.length; s++) {
                const r = t[s];
                if (r) {
                  const t = { x: r.x, y: r.y };
                  (t.x *= e), (t.y *= e), (i[s] = t);
                }
              }
              return i;
            });
        },
        292: (t, e, i) => {
          Object.defineProperty(e, '__esModule', { value: !0 }),
            (e.Turtle = e.StepType = void 0);
          const s = i(187),
            r = i(912),
            n = i(742);
          function o(t) {
            t.translate(t.canvas.width / 2, t.canvas.height / 2),
              t.transform(1, 0, 0, -1, 0, 0);
          }
          var h;
          !(function (t) {
            (t[(t.Forward = 0)] = 'Forward'),
              (t[(t.Left = 1)] = 'Left'),
              (t[(t.Right = 2)] = 'Right'),
              (t[(t.SetAngle = 3)] = 'SetAngle'),
              (t[(t.Hide = 4)] = 'Hide'),
              (t[(t.Show = 5)] = 'Show'),
              (t[(t.PenUp = 6)] = 'PenUp'),
              (t[(t.PenDown = 7)] = 'PenDown'),
              (t[(t.Reset = 8)] = 'Reset'),
              (t[(t.Clear = 9)] = 'Clear'),
              (t[(t.Goto = 10)] = 'Goto'),
              (t[(t.SetColor = 11)] = 'SetColor'),
              (t[(t.SetWidth = 12)] = 'SetWidth'),
              (t[(t.SetShape = 13)] = 'SetShape'),
              (t[(t.SetSpeed = 14)] = 'SetSpeed');
          })((h = e.StepType || (e.StepType = {})));
          class a extends s.EventEmitter {
            constructor(t, e) {
              super(),
                (this.hidden = !1),
                (this.wrap = !0),
                (this.penDown = !0),
                (this.stepByStep = !1),
                (this.step = !1),
                (this.steps = []),
                (this.color = new r.Color([255, 0, 255])),
                (this.width = 1),
                (this.position = { x: 0, y: 0 }),
                (this.angle = 0),
                (this.shape = n.BuiltInShapes.Default),
                (this.ctx = t),
                (null == e ? void 0 : e.hidden) && (this.hidden = e.hidden),
                (null == e ? void 0 : e.disableWrapping) &&
                  (this.wrap = !e.disableWrapping),
                (null == e ? void 0 : e.defaultColor) &&
                  (this.color = (0, r.convertToColor)(e.defaultColor)),
                (null == e ? void 0 : e.width) && (this.width = e.width),
                (null == e ? void 0 : e.startPostition) &&
                  (this.position = e.startPostition),
                (null == e ? void 0 : e.startAngle) &&
                  (this.angle = e.startAngle),
                (null == e ? void 0 : e.shape) && (this.shape = e.shape),
                this.draw();
            }
            get inStep() {
              return !this.stepByStep || this.step;
            }
            doStep(t) {
              return (
                this.emit('step', t),
                t.type === h.Goto && this.goto(...t.args),
                t.type === h.SetAngle && this.setAngle(...t.args),
                t.type === h.Forward && this.forward(...t.args),
                t.type === h.Left && this.left(...t.args),
                t.type === h.Right && this.right(...t.args),
                t.type === h.Hide && this.hide(),
                t.type === h.Show && this.show(),
                t.type === h.PenDown && this.putPenDown(),
                t.type === h.PenUp && this.putPenUp(),
                t.type === h.Reset && this.reset(),
                t.type === h.Clear && this.clear(),
                t.type === h.SetColor && this.setColor(...t.args),
                t.type === h.SetWidth && this.setWidth(...t.args),
                t.type === h.SetSpeed && this.setSpeed(...t.args),
                t.type === h.SetShape && this.setShape(...t.args),
                this
              );
            }
            nextStep() {
              const t = this.steps.shift();
              return (
                t
                  ? ((this.step = !0), this.doStep(t), (this.step = !1))
                  : this.interval &&
                    (clearInterval(this.interval), (this.interval = void 0)),
                this
              );
            }
            clear() {
              var t;
              return (
                this.inStep
                  ? (this.emit('clear'),
                    (t = this.ctx).save(),
                    t.setTransform(1, 0, 0, 1, 0, 0),
                    t.clearRect(0, 0, t.canvas.width, t.canvas.height),
                    t.restore(),
                    this.draw())
                  : this.steps.push({ type: h.Clear }),
                this
              );
            }
            hide() {
              return (
                this.inStep
                  ? (this.emit('hide'),
                    (this.hidden = !0),
                    this.restoreImageData(),
                    this.draw())
                  : this.steps.push({ type: h.Hide }),
                this
              );
            }
            show() {
              return (
                this.inStep
                  ? (this.emit('show'), (this.hidden = !1), this.draw())
                  : this.steps.push({ type: h.Show }),
                this
              );
            }
            reset() {
              return (
                this.inStep
                  ? (this.emit('reset'),
                    (this.hidden = !1),
                    (this.wrap = !0),
                    (this.penDown = !0),
                    (this.stepByStep = !1),
                    this.setWidth(1),
                    this.setColor([0, 0, 0]),
                    this.setAngle(0),
                    this.goto(0, 0),
                    this.clear())
                  : this.steps.push({ type: h.Reset }),
                this
              );
            }
            setShape(t) {
              return (
                this.inStep
                  ? (this.emit('setShape', t), (this.shape = t), this.draw())
                  : this.steps.push({ type: h.SetShape, args: [t] }),
                this
              );
            }
            setSpeed(t) {
              return (
                this.inStep
                  ? (this.emit('setSpeed', t),
                    (this.stepByStep = t > 0),
                    (this.speed = t),
                    this.interval && clearInterval(this.interval),
                    (this.interval = setInterval(this.nextStep.bind(this), t)))
                  : this.steps.push({ type: h.SetSpeed, args: [t] }),
                this
              );
            }
            putPenUp() {
              return (
                this.inStep
                  ? (this.emit('putPenUp'), (this.penDown = !1))
                  : this.steps.push({ type: h.PenUp }),
                this
              );
            }
            putPenDown() {
              return (
                this.inStep
                  ? (this.emit('putPenDown'), (this.penDown = !0))
                  : this.steps.push({ type: h.PenDown }),
                this
              );
            }
            invertPen() {
              return (this.penDown = !this.penDown), this;
            }
            setColor(t) {
              return (
                this.inStep
                  ? (this.emit('setColor', t),
                    (this.color = (0, r.convertToColor)(t)),
                    this.restoreImageData(),
                    this.draw())
                  : this.steps.push({ type: h.SetColor, args: [t] }),
                this
              );
            }
            setWidth(t) {
              return (
                this.inStep
                  ? (this.emit('setWidth', t),
                    (this.width = t),
                    this.restoreImageData(),
                    this.draw())
                  : this.steps.push({ type: h.SetWidth, args: [t] }),
                this
              );
            }
            setAngle(t) {
              return (
                this.inStep
                  ? (this.emit('setAngle', t),
                    (this.angle = t),
                    this.restoreImageData(),
                    this.draw())
                  : this.steps.push({ type: h.SetAngle, args: [t] }),
                this
              );
            }
            left(t) {
              return (
                this.inStep
                  ? (this.emit('left', t),
                    (this.angle -= t),
                    this.restoreImageData(),
                    this.draw())
                  : this.steps.push({ type: h.Left, args: [t] }),
                this
              );
            }
            right(t) {
              return (
                this.inStep
                  ? (this.emit('right', t),
                    (this.angle += t),
                    this.restoreImageData(),
                    this.draw())
                  : this.steps.push({ type: h.Right, args: [t] }),
                this
              );
            }
            goto(t, e) {
              return (
                this.inStep
                  ? (this.emit('goto', t, e),
                    (this.position.x = t),
                    (this.position.y = e),
                    this.restoreImageData(),
                    this.draw())
                  : this.steps.push({ type: h.Goto, args: [t, e] }),
                this
              );
            }
            draw() {
              if ((this.saveImageData(), this.hidden)) return this;
              const t = Math.max(this.width / 2, 1),
                e = (0, n.rotateShape)(
                  (0, n.resizeShape)(this.shape, t),
                  this.angle
                ),
                i = this.position.x,
                s = this.position.y;
              this.ctx.save(),
                o(this.ctx),
                this.ctx.beginPath(),
                this.ctx.moveTo(i, s);
              for (let t = 0; t < e.length; t++) {
                const r = e[t];
                r && this.ctx.lineTo(i + r.x, s + r.y);
              }
              return (
                this.ctx.closePath(),
                (this.ctx.fillStyle = this.color.toHex()),
                this.ctx.fill(),
                (this.ctx.lineWidth = Math.max(this.width / 4, 1)),
                (this.ctx.strokeStyle = 'black'),
                this.ctx.stroke(),
                this.ctx.restore(),
                this
              );
            }
            saveImageData() {
              return (
                (this.preDrawData = this.ctx.getImageData(
                  0,
                  0,
                  this.ctx.canvas.width,
                  this.ctx.canvas.height
                )),
                this
              );
            }
            restoreImageData() {
              return (
                this.preDrawData &&
                  this.ctx.putImageData(this.preDrawData, 0, 0),
                this
              );
            }
            forward(t) {
              if (!this.inStep)
                return this.steps.push({ type: h.Forward, args: [t] }), this;
              this.emit('forward', t),
                this.restoreImageData(),
                this.ctx.save(),
                o(this.ctx),
                (this.ctx.lineWidth = this.width),
                (this.ctx.strokeStyle = this.color.toRGBA()),
                this.penDown && this.ctx.beginPath();
              const e = Math.cos((0, n.degToRad)(this.angle)),
                i = Math.sin((0, n.degToRad)(this.angle)),
                s = this.ctx.canvas.width / 2,
                r = this.ctx.canvas.height / 2;
              let a = this.position.x,
                l = this.position.y,
                u = a + i * t,
                p = l + e * t;
              for (this.ctx.moveTo(a, l); t > 0; ) {
                const n = Math.abs((u > a ? s - a : s + a) / i),
                  o = Math.abs((p > l ? r - l : r + l) / e);
                this.ctx.moveTo(a, l),
                  this.wrap && Math.abs(u) > s && n <= o
                    ? ((a = u > 0 ? -s : s),
                      (l += e * n),
                      this.ctx.lineTo(u, p),
                      (u -= u > 0 ? 2 * s : -2 * s),
                      (t -= n))
                    : this.wrap && Math.abs(p) > r && n >= o
                    ? ((l = p > 0 ? -r : r),
                      (a += i * o),
                      this.ctx.lineTo(u, p),
                      (p -= p > 0 ? 2 * r : -2 * r),
                      (t -= o))
                    : (this.ctx.lineTo(u, p), (t = 0));
              }
              return (
                this.penDown && this.ctx.stroke(),
                this.ctx.restore(),
                this.saveImageData(),
                this.goto(u, p),
                this
              );
            }
            drawGrid(t) {
              (t = Math.max(2, t)), (this.step = !0);
              const e = this.angle,
                i = this.color,
                s = this.width,
                r = this.position.x,
                n = this.position.y,
                o = this.ctx.canvas.width,
                h = this.ctx.canvas.height;
              this.setColor('grey'), this.setWidth(2);
              for (let e = 1; e < t; e++)
                this.setAngle(90),
                  this.goto(-o / 2, h - (h / t) * e - h / 2),
                  this.forward(o),
                  this.setAngle(180),
                  this.goto(o - (o / t) * e - o / 2, h / 2),
                  this.forward(h);
              return (
                this.setAngle(e),
                this.setColor(i),
                this.setWidth(s),
                this.goto(r, n),
                this.ctx.restore(),
                (this.step = !1),
                this
              );
            }
            expose(t, e) {
              var i, s, r, n, o, h, a, l, u, p, d, c, g, v, f;
              return (
                (t[
                  null !== (i = null == e ? void 0 : e.forward) && void 0 !== i
                    ? i
                    : 'forward'
                ] = this.forward.bind(this)),
                (t[
                  null !== (s = null == e ? void 0 : e.left) && void 0 !== s
                    ? s
                    : 'left'
                ] = this.left.bind(this)),
                (t[
                  null !== (r = null == e ? void 0 : e.right) && void 0 !== r
                    ? r
                    : 'right'
                ] = this.right.bind(this)),
                (t[
                  null !== (n = null == e ? void 0 : e.setAngle) && void 0 !== n
                    ? n
                    : 'setAngle'
                ] = this.setAngle.bind(this)),
                (t[
                  null !== (o = null == e ? void 0 : e.hide) && void 0 !== o
                    ? o
                    : 'hide'
                ] = this.hide.bind(this)),
                (t[
                  null !== (h = null == e ? void 0 : e.show) && void 0 !== h
                    ? h
                    : 'show'
                ] = this.show.bind(this)),
                (t[
                  null !== (a = null == e ? void 0 : e.putPenUp) && void 0 !== a
                    ? a
                    : 'putPenUp'
                ] = this.putPenUp.bind(this)),
                (t[
                  null !== (l = null == e ? void 0 : e.putPenDown) &&
                  void 0 !== l
                    ? l
                    : 'putPenDown'
                ] = this.putPenDown.bind(this)),
                (t[
                  null !== (u = null == e ? void 0 : e.reset) && void 0 !== u
                    ? u
                    : 'reset'
                ] = this.reset.bind(this)),
                (t[
                  null !== (p = null == e ? void 0 : e.clear) && void 0 !== p
                    ? p
                    : 'clear'
                ] = this.clear.bind(this)),
                (t[
                  null !== (d = null == e ? void 0 : e.goto) && void 0 !== d
                    ? d
                    : 'goto'
                ] = this.goto.bind(this)),
                (t[
                  null !== (c = null == e ? void 0 : e.setColor) && void 0 !== c
                    ? c
                    : 'setColor'
                ] = this.setColor.bind(this)),
                (t[
                  null !== (g = null == e ? void 0 : e.setWidth) && void 0 !== g
                    ? g
                    : 'setWidth'
                ] = this.setWidth.bind(this)),
                (t[
                  null !== (v = null == e ? void 0 : e.setShape) && void 0 !== v
                    ? v
                    : 'setShape'
                ] = this.setShape.bind(this)),
                (t[
                  null !== (f = null == e ? void 0 : e.setSpeed) && void 0 !== f
                    ? f
                    : 'setSpeed'
                ] = this.setSpeed.bind(this)),
                this
              );
            }
          }
          e.Turtle = a;
        },
        187: (t) => {
          var e,
            i = 'object' == typeof Reflect ? Reflect : null,
            s =
              i && 'function' == typeof i.apply
                ? i.apply
                : function (t, e, i) {
                    return Function.prototype.apply.call(t, e, i);
                  };
          e =
            i && 'function' == typeof i.ownKeys
              ? i.ownKeys
              : Object.getOwnPropertySymbols
              ? function (t) {
                  return Object.getOwnPropertyNames(t).concat(
                    Object.getOwnPropertySymbols(t)
                  );
                }
              : function (t) {
                  return Object.getOwnPropertyNames(t);
                };
          var r =
            Number.isNaN ||
            function (t) {
              return t != t;
            };
          function n() {
            n.init.call(this);
          }
          (t.exports = n),
            (t.exports.once = function (t, e) {
              return new Promise(function (i, s) {
                function r(i) {
                  t.removeListener(e, n), s(i);
                }
                function n() {
                  'function' == typeof t.removeListener &&
                    t.removeListener('error', r),
                    i([].slice.call(arguments));
                }
                v(t, e, n, { once: !0 }),
                  'error' !== e &&
                    (function (t, e, i) {
                      'function' == typeof t.on &&
                        v(t, 'error', e, { once: !0 });
                    })(t, r);
              });
            }),
            (n.EventEmitter = n),
            (n.prototype._events = void 0),
            (n.prototype._eventsCount = 0),
            (n.prototype._maxListeners = void 0);
          var o = 10;
          function h(t) {
            if ('function' != typeof t)
              throw new TypeError(
                'The "listener" argument must be of type Function. Received type ' +
                  typeof t
              );
          }
          function a(t) {
            return void 0 === t._maxListeners
              ? n.defaultMaxListeners
              : t._maxListeners;
          }
          function l(t, e, i, s) {
            var r, n, o, l;
            if (
              (h(i),
              void 0 === (n = t._events)
                ? ((n = t._events = Object.create(null)), (t._eventsCount = 0))
                : (void 0 !== n.newListener &&
                    (t.emit('newListener', e, i.listener ? i.listener : i),
                    (n = t._events)),
                  (o = n[e])),
              void 0 === o)
            )
              (o = n[e] = i), ++t._eventsCount;
            else if (
              ('function' == typeof o
                ? (o = n[e] = s ? [i, o] : [o, i])
                : s
                ? o.unshift(i)
                : o.push(i),
              (r = a(t)) > 0 && o.length > r && !o.warned)
            ) {
              o.warned = !0;
              var u = new Error(
                'Possible EventEmitter memory leak detected. ' +
                  o.length +
                  ' ' +
                  String(e) +
                  ' listeners added. Use emitter.setMaxListeners() to increase limit'
              );
              (u.name = 'MaxListenersExceededWarning'),
                (u.emitter = t),
                (u.type = e),
                (u.count = o.length),
                (l = u),
                console && console.warn && console.warn(l);
            }
            return t;
          }
          function u() {
            if (!this.fired)
              return (
                this.target.removeListener(this.type, this.wrapFn),
                (this.fired = !0),
                0 === arguments.length
                  ? this.listener.call(this.target)
                  : this.listener.apply(this.target, arguments)
              );
          }
          function p(t, e, i) {
            var s = {
                fired: !1,
                wrapFn: void 0,
                target: t,
                type: e,
                listener: i,
              },
              r = u.bind(s);
            return (r.listener = i), (s.wrapFn = r), r;
          }
          function d(t, e, i) {
            var s = t._events;
            if (void 0 === s) return [];
            var r = s[e];
            return void 0 === r
              ? []
              : 'function' == typeof r
              ? i
                ? [r.listener || r]
                : [r]
              : i
              ? (function (t) {
                  for (var e = new Array(t.length), i = 0; i < e.length; ++i)
                    e[i] = t[i].listener || t[i];
                  return e;
                })(r)
              : g(r, r.length);
          }
          function c(t) {
            var e = this._events;
            if (void 0 !== e) {
              var i = e[t];
              if ('function' == typeof i) return 1;
              if (void 0 !== i) return i.length;
            }
            return 0;
          }
          function g(t, e) {
            for (var i = new Array(e), s = 0; s < e; ++s) i[s] = t[s];
            return i;
          }
          function v(t, e, i, s) {
            if ('function' == typeof t.on) s.once ? t.once(e, i) : t.on(e, i);
            else {
              if ('function' != typeof t.addEventListener)
                throw new TypeError(
                  'The "emitter" argument must be of type EventEmitter. Received type ' +
                    typeof t
                );
              t.addEventListener(e, function r(n) {
                s.once && t.removeEventListener(e, r), i(n);
              });
            }
          }
          Object.defineProperty(n, 'defaultMaxListeners', {
            enumerable: !0,
            get: function () {
              return o;
            },
            set: function (t) {
              if ('number' != typeof t || t < 0 || r(t))
                throw new RangeError(
                  'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                    t +
                    '.'
                );
              o = t;
            },
          }),
            (n.init = function () {
              (void 0 !== this._events &&
                this._events !== Object.getPrototypeOf(this)._events) ||
                ((this._events = Object.create(null)), (this._eventsCount = 0)),
                (this._maxListeners = this._maxListeners || void 0);
            }),
            (n.prototype.setMaxListeners = function (t) {
              if ('number' != typeof t || t < 0 || r(t))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' +
                    t +
                    '.'
                );
              return (this._maxListeners = t), this;
            }),
            (n.prototype.getMaxListeners = function () {
              return a(this);
            }),
            (n.prototype.emit = function (t) {
              for (var e = [], i = 1; i < arguments.length; i++)
                e.push(arguments[i]);
              var r = 'error' === t,
                n = this._events;
              if (void 0 !== n) r = r && void 0 === n.error;
              else if (!r) return !1;
              if (r) {
                var o;
                if ((e.length > 0 && (o = e[0]), o instanceof Error)) throw o;
                var h = new Error(
                  'Unhandled error.' + (o ? ' (' + o.message + ')' : '')
                );
                throw ((h.context = o), h);
              }
              var a = n[t];
              if (void 0 === a) return !1;
              if ('function' == typeof a) s(a, this, e);
              else {
                var l = a.length,
                  u = g(a, l);
                for (i = 0; i < l; ++i) s(u[i], this, e);
              }
              return !0;
            }),
            (n.prototype.addListener = function (t, e) {
              return l(this, t, e, !1);
            }),
            (n.prototype.on = n.prototype.addListener),
            (n.prototype.prependListener = function (t, e) {
              return l(this, t, e, !0);
            }),
            (n.prototype.once = function (t, e) {
              return h(e), this.on(t, p(this, t, e)), this;
            }),
            (n.prototype.prependOnceListener = function (t, e) {
              return h(e), this.prependListener(t, p(this, t, e)), this;
            }),
            (n.prototype.removeListener = function (t, e) {
              var i, s, r, n, o;
              if ((h(e), void 0 === (s = this._events))) return this;
              if (void 0 === (i = s[t])) return this;
              if (i === e || i.listener === e)
                0 == --this._eventsCount
                  ? (this._events = Object.create(null))
                  : (delete s[t],
                    s.removeListener &&
                      this.emit('removeListener', t, i.listener || e));
              else if ('function' != typeof i) {
                for (r = -1, n = i.length - 1; n >= 0; n--)
                  if (i[n] === e || i[n].listener === e) {
                    (o = i[n].listener), (r = n);
                    break;
                  }
                if (r < 0) return this;
                0 === r
                  ? i.shift()
                  : (function (t, e) {
                      for (; e + 1 < t.length; e++) t[e] = t[e + 1];
                      t.pop();
                    })(i, r),
                  1 === i.length && (s[t] = i[0]),
                  void 0 !== s.removeListener &&
                    this.emit('removeListener', t, o || e);
              }
              return this;
            }),
            (n.prototype.off = n.prototype.removeListener),
            (n.prototype.removeAllListeners = function (t) {
              var e, i, s;
              if (void 0 === (i = this._events)) return this;
              if (void 0 === i.removeListener)
                return (
                  0 === arguments.length
                    ? ((this._events = Object.create(null)),
                      (this._eventsCount = 0))
                    : void 0 !== i[t] &&
                      (0 == --this._eventsCount
                        ? (this._events = Object.create(null))
                        : delete i[t]),
                  this
                );
              if (0 === arguments.length) {
                var r,
                  n = Object.keys(i);
                for (s = 0; s < n.length; ++s)
                  'removeListener' !== (r = n[s]) && this.removeAllListeners(r);
                return (
                  this.removeAllListeners('removeListener'),
                  (this._events = Object.create(null)),
                  (this._eventsCount = 0),
                  this
                );
              }
              if ('function' == typeof (e = i[t])) this.removeListener(t, e);
              else if (void 0 !== e)
                for (s = e.length - 1; s >= 0; s--)
                  this.removeListener(t, e[s]);
              return this;
            }),
            (n.prototype.listeners = function (t) {
              return d(this, t, !0);
            }),
            (n.prototype.rawListeners = function (t) {
              return d(this, t, !1);
            }),
            (n.listenerCount = function (t, e) {
              return 'function' == typeof t.listenerCount
                ? t.listenerCount(e)
                : c.call(t, e);
            }),
            (n.prototype.listenerCount = c),
            (n.prototype.eventNames = function () {
              return this._eventsCount > 0 ? e(this._events) : [];
            });
        },
      },
      e = {};
    return (function i(s) {
      var r = e[s];
      if (void 0 !== r) return r.exports;
      var n = (e[s] = { exports: {} });
      return t[s].call(n.exports, n, n.exports, i), n.exports;
    })(590);
  })();
});
